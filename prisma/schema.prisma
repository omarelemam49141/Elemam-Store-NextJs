// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String   @unique(map: "product_slug_index")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @db.Decimal(12, 2)
  rating      Decimal  @db.Decimal(3, 2)
  numReviews  Int
  isFeatured  Boolean  @default(false)
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String    @unique(map: "User_Email_idx")
  emailVerified DateTime?
  image         String?
  password      String?
  PaymentMethod String?
  role          String    @default("user")
  address       Json      @db.Json
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt @db.Timestamp(6)
  accounts      Account[]
  Session       Session[]
  is_deleted    Boolean   @default(false)
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  is_deleted        Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

model VerificationToken {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)
}
